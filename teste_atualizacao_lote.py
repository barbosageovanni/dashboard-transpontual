#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste da atualiza√ß√£o em lote de CTEs
teste_atualizacao_lote.py
"""

import requests
import json
import io
from datetime import date

# Configura√ß√µes
BASE_URL = "http://localhost:5000"
LOGIN_URL = f"{BASE_URL}/auth/login"
LOTE_URL = f"{BASE_URL}/ctes/api/atualizar-lote"

def criar_csv_teste():
    """Cria um CSV de teste para upload"""
    csv_content = """N√∫mero CTE,Cliente,Placa Ve√≠culo,Valor Total,Data Emiss√£o,Observa√ß√£o
777777,Teste Lote 1,ABC-1111,1000.50,2025-08-23,Teste via lote
777778,Teste Lote 2,ABC-2222,2000.75,2025-08-23,Segundo teste
"""
    return io.BytesIO(csv_content.encode('utf-8'))

def testar_atualizacao_lote():
    """Testa a atualiza√ß√£o em lote de CTEs"""
    
    # Dados de login
    login_data = {
        "username": "admin",
        "password": "Admin123!"
    }
    
    try:
        # Criar sess√£o para manter cookies
        session = requests.Session()
        
        print("üîë Fazendo login...")
        
        # 1. Fazer login
        login_response = session.post(LOGIN_URL, data=login_data)
        print(f"Login status: {login_response.status_code}")
        
        if login_response.status_code != 200:
            print(f"‚ùå Erro no login: {login_response.text}")
            return False
        
        print("‚úÖ Login realizado com sucesso!")
        
        # 2. Preparar arquivo CSV
        print("üìÅ Preparando arquivo CSV de teste...")
        csv_file = criar_csv_teste()
        
        # 3. Testar atualiza√ß√£o em lote
        print("üì§ Enviando arquivo para atualiza√ß√£o em lote...")
        
        files = {
            'arquivo': ('teste_lote.csv', csv_file, 'text/csv')
        }
        
        data = {
            'modo': 'upsert'  # Inserir se n√£o existir, atualizar se existir
        }
        
        lote_response = session.post(
            LOTE_URL,
            files=files,
            data=data
        )
        
        print(f"Lote status: {lote_response.status_code}")
        print(f"Response headers: {dict(lote_response.headers)}")
        
        if lote_response.status_code == 200:
            response_data = lote_response.json()
            print("‚úÖ Resposta da API:")
            print(json.dumps(response_data, indent=2, ensure_ascii=False))
            
            if response_data.get('sucesso'):
                print("üéâ Atualiza√ß√£o em lote executada com sucesso!")
                return True
            else:
                print(f"‚ùå Erro na atualiza√ß√£o: {response_data.get('mensagem')}")
                return False
        else:
            print(f"‚ùå Erro HTTP {lote_response.status_code}")
            print(f"Response text: {lote_response.text[:500]}...")  # Primeiros 500 chars
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o do teste: {e}")
        return False

def testar_validacao_arquivo():
    """Testa apenas a valida√ß√£o de arquivo"""
    
    # Dados de login
    login_data = {
        "username": "admin",
        "password": "Admin123!"
    }
    
    try:
        session = requests.Session()
        
        print("\nüîç Testando valida√ß√£o de arquivo...")
        
        # Login
        login_response = session.post(LOGIN_URL, data=login_data)
        if login_response.status_code != 200:
            print("‚ùå Erro no login para valida√ß√£o")
            return False
        
        # Preparar arquivo
        csv_file = criar_csv_teste()
        
        files = {
            'arquivo': ('teste_validacao.csv', csv_file, 'text/csv')
        }
        
        # Testar valida√ß√£o
        validacao_response = session.post(
            f"{BASE_URL}/ctes/api/validar-arquivo",
            files=files
        )
        
        print(f"Valida√ß√£o status: {validacao_response.status_code}")
        
        if validacao_response.status_code == 200:
            response_data = validacao_response.json()
            print("‚úÖ Valida√ß√£o OK:")
            print(json.dumps(response_data, indent=2, ensure_ascii=False))
            return True
        else:
            print(f"‚ùå Erro na valida√ß√£o: {validacao_response.text[:300]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False

if __name__ == "__main__":
    print("üß™ TESTE DE ATUALIZA√á√ÉO EM LOTE")
    print("=" * 60)
    
    # Teste 1: Valida√ß√£o de arquivo
    validacao_ok = testar_validacao_arquivo()
    
    # Teste 2: Atualiza√ß√£o em lote
    lote_ok = testar_atualizacao_lote()
    
    print("=" * 60)
    print("üìä RESULTADO DOS TESTES:")
    print(f"  VALIDA√á√ÉO     {'‚úÖ PASSOU' if validacao_ok else '‚ùå FALHOU'}")
    print(f"  LOTE          {'‚úÖ PASSOU' if lote_ok else '‚ùå FALHOU'}")
    
    if validacao_ok and lote_ok:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema de lote funcionando.")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM! Verificar implementa√ß√£o.")
