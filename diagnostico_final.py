#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico Final - Por que o sistema n√£o carrega a interface nova?
diagnostico_final.py
"""

import subprocess
import sys
import os

def verificar_dependencias():
    """Verifica se depend√™ncias cr√≠ticas est√£o instaladas"""
    print("üîç VERIFICANDO DEPEND√äNCIAS CR√çTICAS:")
    print("=" * 50)
    
    dependencias = {
        'scipy': 'pip install scipy',
        'pandas': 'pip install pandas', 
        'dateutil': 'pip install python-dateutil'
    }
    
    faltando = []
    
    for dep, comando in dependencias.items():
        try:
            if dep == 'dateutil':
                import dateutil
            else:
                __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - FALTANDO!")
            faltando.append(comando)
    
    if faltando:
        print(f"\nüîß INSTALAR DEPEND√äNCIAS FALTANDO:")
        for comando in faltando:
            print(f"   {comando}")
        return False
    else:
        print(f"\n‚úÖ Todas as depend√™ncias est√£o instaladas")
        return True

def verificar_servidor():
    """Verifica se servidor est√° rodando e qual porta"""
    print(f"\nüîç VERIFICANDO SERVIDOR:")
    print("=" * 50)
    
    try:
        import requests
        
        urls_teste = [
            'http://localhost:5000',
            'http://127.0.0.1:5000',
            'http://localhost:8000',
            'http://127.0.0.1:8000'
        ]
        
        servidor_ativo = None
        for url in urls_teste:
            try:
                response = requests.get(url, timeout=2)
                if response.status_code == 200:
                    servidor_ativo = url
                    print(f"‚úÖ Servidor ativo em: {url}")
                    break
            except:
                continue
        
        if not servidor_ativo:
            print("‚ùå Nenhum servidor Flask detectado!")
            print("üîß SOLU√á√ÉO: Execute 'python iniciar.py'")
            return None
        
        # Testar rota espec√≠fica de an√°lise financeira
        try:
            analise_url = f"{servidor_ativo}/analise-financeira/"
            response = requests.get(analise_url, timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ Rota an√°lise financeira OK: {analise_url}")
                
                # Verificar se retorna a interface nova
                content = response.text
                if 'projecoes-tab' in content:
                    print("‚úÖ Interface nova sendo servida!")
                    return servidor_ativo
                else:
                    print("‚ùå Interface ANTIGA sendo servida (cache ou template errado)")
                    return "INTERFACE_ANTIGA"
            else:
                print(f"‚ùå Rota an√°lise financeira ERRO: {response.status_code}")
                return "ERRO_ROTA"
                
        except Exception as e:
            print(f"‚ùå Erro ao testar rota: {str(e)}")
            return "ERRO_CONEXAO"
            
    except ImportError:
        print("‚ö†Ô∏è requests n√£o instalado - n√£o foi poss√≠vel testar servidor")
        return "REQUESTS_FALTANDO"

def verificar_processo_flask():
    """Verifica processos Flask rodando"""
    print(f"\nüîç VERIFICANDO PROCESSOS FLASK:")
    print("=" * 50)
    
    try:
        # Windows
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq python.exe'], 
                              capture_output=True, text=True)
        
        if 'python.exe' in result.stdout:
            print("‚úÖ Processo Python detectado")
            
            # Contar processos
            linhas = [l for l in result.stdout.split('\n') if 'python.exe' in l]
            print(f"üìä {len(linhas)} processo(s) Python ativo(s)")
            
            return True
        else:
            print("‚ùå Nenhum processo Python ativo")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar processos: {str(e)}")
        return False

def gerar_comando_teste():
    """Gera comandos espec√≠ficos para testar"""
    print(f"\nüß™ COMANDOS DE TESTE:")
    print("=" * 50)
    
    comandos = [
        ("Testar importa√ß√£o dos servi√ßos", 
         "python -c \"from app.services.projecoes_service import ProjecoesService; print('‚úÖ ProjecoesService OK')\""),
        
        ("Testar rota diretamente",
         "python -c \"from app import create_app; app = create_app(); print('‚úÖ App criada'); print([str(r) for r in app.url_map.iter_rules() if 'analise' in str(r)])\""),
        
        ("Verificar template carregado",
         "python -c \"import os; print('Template existe:', os.path.exists('app/templates/analise_financeira/index.html'))\""),
         
        ("Testar depend√™ncias cr√≠ticas",
         "python -c \"import scipy, pandas, dateutil; print('‚úÖ Todas depend√™ncias OK')\"")
    ]
    
    for desc, cmd in comandos:
        print(f"\nüìù {desc}:")
        print(f"   {cmd}")

def main():
    print("üéØ DIAGN√ìSTICO FINAL - POR QUE N√ÉO FUNCIONA?")
    print("=" * 60)
    print("üìã Baseado no diagn√≥stico anterior:")
    print("   ‚úÖ Todos os arquivos est√£o corretos")
    print("   ‚úÖ Template √© a vers√£o nova")
    print("   ‚úÖ Blueprints registrados")
    print("   ‚ùì Mas interface antiga ainda aparece...")
    
    # 1. Verificar depend√™ncias
    deps_ok = verificar_dependencias()
    
    # 2. Verificar servidor
    servidor_status = verificar_servidor()
    
    # 3. Verificar processos
    processo_ok = verificar_processo_flask()
    
    # 4. Gerar comandos de teste
    gerar_comando_teste()
    
    # 5. DIAGN√ìSTICO FINAL
    print(f"\nüéØ DIAGN√ìSTICO FINAL:")
    print("=" * 60)
    
    problemas = []
    
    if not deps_ok:
        problemas.append("‚ùå Depend√™ncias faltando (scipy, dateutil)")
    
    if servidor_status == "INTERFACE_ANTIGA":
        problemas.append("‚ùå Servidor serve interface antiga (cache/restart needed)")
    elif servidor_status == "ERRO_ROTA":
        problemas.append("‚ùå Rota de an√°lise financeira com erro")
    elif servidor_status == "ERRO_CONEXAO":
        problemas.append("‚ùå Servidor n√£o responde")
    elif servidor_status is None:
        problemas.append("‚ùå Servidor n√£o est√° rodando")
    
    if not processo_ok:
        problemas.append("‚ùå Processo Flask n√£o ativo")
    
    if problemas:
        print("üö® PROBLEMAS ENCONTRADOS:")
        for problema in problemas:
            print(f"   {problema}")
        
        print(f"\nüîß SOLU√á√ÉO STEP-BY-STEP:")
        
        if not deps_ok:
            print("1Ô∏è‚É£ INSTALAR DEPEND√äNCIAS:")
            print("   pip install scipy python-dateutil pandas")
        
        print("2Ô∏è‚É£ PARAR SERVIDOR COMPLETAMENTE:")
        print("   - Fechar terminal Flask (Ctrl+C)")
        print("   - Verificar se n√£o h√° outros processos Python")
        
        print("3Ô∏è‚É£ REINICIAR SERVIDOR:")
        print("   python iniciar.py")
        
        print("4Ô∏è‚É£ LIMPAR CACHE NAVEGADOR:")
        print("   - Ctrl+F5 (hard refresh)")
        print("   - Ou abrir aba an√¥nima/privada")
        
        print("5Ô∏è‚É£ ACESSAR URL CORRETA:")
        print("   http://localhost:5000/analise-financeira/")
        print("   (N√ÉO /dashboard/ - essa √© a p√°gina antiga!)")
        
        print("6Ô∏è‚É£ VERIFICAR CONSOLE DO NAVEGADOR:")
        print("   - F12 ‚Üí Console")
        print("   - Procurar erros JavaScript")
        
    else:
        print("‚úÖ Tudo parece estar funcionando!")
        print("üéØ VERIFICA√á√ïES FINAIS:")
        print("   1. Acesse: http://localhost:5000/analise-financeira/")
        print("   2. Limpe cache: Ctrl+F5")
        print("   3. Verifique console: F12")
    
    print(f"\nüí° DICA IMPORTANTE:")
    print("Se voc√™ est√° acessando /dashboard/, essa √© a p√°gina ANTIGA!")
    print("A nova interface est√° em /analise-financeira/")
    
    print("=" * 60)

if __name__ == "__main__":
    main()