#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Inicializa√ß√£o para Deploy - Dashboard Baker
Executa configura√ß√µes necess√°rias ap√≥s deploy
"""

import os
import sys
from datetime import datetime

def init_deploy():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    print("üöÄ INICIANDO CONFIGURA√á√ÉO P√ìS-DEPLOY")
    print("=" * 50)
    
    try:
        # Importar app
        from app import create_app, db
        from app.models.user import User
        from app.models.cte import CTE
        
        # Criar contexto da aplica√ß√£o
        app = create_app()
        
        with app.app_context():
            
            # 1. VERIFICAR CONEX√ÉO COM BANCO
            print("üìä 1. Verificando conex√£o com banco de dados...")
            try:
                from sqlalchemy import text
                db.session.execute(text('SELECT 1'))
                db.session.commit()
                print("   ‚úÖ Conex√£o com banco OK")
            except Exception as e:
                print(f"   ‚ùå Erro na conex√£o: {e}")
                return False
            
            # 2. CRIAR TABELAS
            print("üóÑÔ∏è  2. Criando/verificando tabelas...")
            try:
                db.create_all()
                print("   ‚úÖ Tabelas criadas/verificadas")
            except Exception as e:
                print(f"   ‚ùå Erro ao criar tabelas: {e}")
                return False
            
            # 3. VERIFICAR/CRIAR USU√ÅRIO ADMIN
            print("üë§ 3. Verificando usu√°rio administrador...")
            try:
                admin_count = User.query.filter_by(tipo_usuario='admin', ativo=True).count()
                
                if admin_count == 0:
                    print("   ‚ö†Ô∏è  Nenhum admin encontrado, criando admin inicial...")
                    sucesso, resultado = User.criar_admin_inicial()
                    
                    if sucesso:
                        print("   ‚úÖ Admin criado com sucesso")
                        print(f"   üìã {resultado}")
                    else:
                        print(f"   ‚ùå Erro ao criar admin: {resultado}")
                        return False
                else:
                    print(f"   ‚úÖ {admin_count} administrador(es) encontrado(s)")
                    
            except Exception as e:
                print(f"   ‚ùå Erro na verifica√ß√£o de admin: {e}")
                return False
            
            # 4. VERIFICAR ESTRUTURA DOS MODELOS
            print("üèóÔ∏è  4. Verificando estrutura dos modelos...")
            try:
                # Testar modelo CTE
                total_ctes = CTE.query.count()
                print(f"   üìã CTEs no sistema: {total_ctes}")
                
                # Testar modelo User
                total_users = User.query.count()
                print(f"   üë• Usu√°rios no sistema: {total_users}")
                
                print("   ‚úÖ Modelos funcionando corretamente")
                
            except Exception as e:
                print(f"   ‚ùå Erro nos modelos: {e}")
                return False
            
            # 5. CONFIGURA√á√ïES DE PRODU√á√ÉO
            print("‚öôÔ∏è  5. Aplicando configura√ß√µes de produ√ß√£o...")
            try:
                # Verificar vari√°veis de ambiente cr√≠ticas
                env_vars = {
                    'FLASK_ENV': os.environ.get('FLASK_ENV'),
                    'SECRET_KEY': 'SET' if os.environ.get('SECRET_KEY') else 'NOT_SET',
                    'DATABASE_URL': 'SET' if os.environ.get('DATABASE_URL') else 'NOT_SET',
                }
                
                print("   üìã Vari√°veis de ambiente:")
                for var, value in env_vars.items():
                    status = "‚úÖ" if value not in [None, 'NOT_SET'] else "‚ö†Ô∏è "
                    print(f"      {status} {var}: {value}")
                
                # Verificar se est√° em produ√ß√£o
                if os.environ.get('FLASK_ENV') == 'production':
                    print("   üè≠ Modo produ√ß√£o ativado")
                else:
                    print("   üîß Modo desenvolvimento detectado")
                
            except Exception as e:
                print(f"   ‚ùå Erro nas configura√ß√µes: {e}")
            
            # 6. TESTAR FUNCIONALIDADES CR√çTICAS
            print("üß™ 6. Testando funcionalidades cr√≠ticas...")
            try:
                # Testar cria√ß√£o de CTE (se n√£o existir nenhum)
                if CTE.query.count() == 0:
                    print("   üìù Criando CTE de exemplo...")
                    cte_exemplo = CTE(
                        numero_cte=999999,
                        destinatario_nome="Sistema - Teste Deploy",
                        valor_total=0.01,
                        observacao="CTE criado durante inicializa√ß√£o do sistema"
                    )
                    db.session.add(cte_exemplo)
                    db.session.commit()
                    print("   ‚úÖ CTE de exemplo criado")
                
                print("   ‚úÖ Funcionalidades testadas com sucesso")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro nos testes (n√£o cr√≠tico): {e}")
            
            # 7. RELAT√ìRIO FINAL
            print("üìä 7. Relat√≥rio final do sistema...")
            try:
                stats = {
                    'total_ctes': CTE.query.count(),
                    'total_users': User.query.count(),
                    'admin_users': User.query.filter_by(tipo_usuario='admin', ativo=True).count(),
                    'timestamp': datetime.now().isoformat()
                }
                
                print("   üìà Estat√≠sticas finais:")
                for key, value in stats.items():
                    print(f"      ‚Ä¢ {key}: {value}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro no relat√≥rio: {e}")
    
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO NA INICIALIZA√á√ÉO: {e}")
        return False
    
    print("=" * 50)
    print("üéâ INICIALIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("üåê Sistema pronto para receber tr√°fego")
    return True

def verificar_saude():
    """Verifica√ß√£o r√°pida de sa√∫de do sistema"""
    print("üîç Verifica√ß√£o de sa√∫de do sistema...")
    
    try:
        from app import create_app, db
        from sqlalchemy import text
        
        app = create_app()
        
        with app.app_context():
            # Testar banco
            db.session.execute(text('SELECT 1'))
            print("‚úÖ Banco de dados: OK")
            
            # Testar modelos
            from app.models.user import User
            from app.models.cte import CTE
            
            User.query.count()
            print("‚úÖ Modelo User: OK")
            
            CTE.query.count()
            print("‚úÖ Modelo CTE: OK")
            
            print("üéâ Sistema totalmente operacional!")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "health":
            return verificar_saude()
        elif command == "init":
            return init_deploy()
        else:
            print("Comandos dispon√≠veis: init, health")
            return False
    else:
        # Executar inicializa√ß√£o por padr√£o
        return init_deploy()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)