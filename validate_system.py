#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Valida√ß√£o completa do sistema - Teste todos os componentes
"""

import sys
import os
import pandas as pd
from datetime import datetime

# Adicionar path do projeto
sys.path.append(os.getcwd())

def testar_bulk_update_real():
    """Testa o sistema de bulk update com dados reais"""
    print("üß™ TESTE DO SISTEMA DE BULK UPDATE")
    print("="*40)
    
    try:
        # Importa√ß√µes
        from app import create_app
        from app.models.cte import CTE
        from bulk_update_cte import BulkCTEUpdaterDB
        
        # Criar app
        app = create_app()
        
        with app.app_context():
            # Buscar alguns CTEs reais
            ctes_exemplo = CTE.query.limit(3).all()
            print(f"‚úÖ {len(ctes_exemplo)} CTEs encontrados para teste")
            
            # Mostrar estado atual
            print("\nüìã Estado atual dos CTEs:")
            for cte in ctes_exemplo:
                print(f"  CTE {cte.numero_cte}:")
                print(f"    Cliente: {cte.destinatario_nome or 'VAZIO'}")
                print(f"    Observa√ß√£o: {cte.observacao or 'VAZIO'}")
                print(f"    Data Inclus√£o: {cte.data_inclusao_fatura or 'VAZIO'}")
                print()
            
            # Criar arquivo de teste com atualiza√ß√µes seguras
            dados_teste = []
            for i, cte in enumerate(ctes_exemplo):
                dados_teste.append({
                    'numero_cte': cte.numero_cte,
                    'observacao': f'TESTE ATUALIZA√á√ÉO {i+1} - {datetime.now().strftime("%H:%M:%S")}' if not cte.observacao else None,
                    'data_inclusao_fatura': '2024-08-19' if not cte.data_inclusao_fatura else None
                })
            
            # Salvar arquivo
            df = pd.DataFrame(dados_teste)
            arquivo = 'uploads/teste_real.xlsx'
            df.to_excel(arquivo, index=False)
            print(f"‚úÖ Arquivo de teste real criado: {arquivo}")
            
            # Testar sistema
            updater = BulkCTEUpdaterDB(app)
            
            # 1. Carregamento
            df_loaded = updater.load_update_file(arquivo)
            if df_loaded is None:
                print("‚ùå Falha no carregamento")
                return False
            print("‚úÖ Arquivo carregado com sucesso")
            
            # 2. Normaliza√ß√£o
            df_normalized = updater.normalize_data(df_loaded)
            if df_normalized.empty:
                print("‚ùå Falha na normaliza√ß√£o")
                return False
            print("‚úÖ Dados normalizados com sucesso")
            print(f"üìä {len(df_normalized)} registros v√°lidos")
            
            # 3. Valida√ß√£o
            is_valid, errors = updater.validate_data(df_normalized)
            if not is_valid:
                print("‚ùå Dados inv√°lidos:")
                for error in errors:
                    print(f"  - {error}")
                return False
            print("‚úÖ Dados validados com sucesso")
            
            # 4. Verificar CTEs no banco
            existing_ctes, not_found = updater.check_existing_ctes(df_normalized)
            print(f"‚úÖ Verifica√ß√£o no banco: {len(existing_ctes)} CTEs encontrados")
            if not_found:
                print(f"‚ö†Ô∏è CTEs n√£o encontrados: {not_found}")
            
            # 5. Gerar plano
            plan = updater.generate_update_plan(df_normalized, 'empty_only')
            print(f"‚úÖ Plano gerado: {len(plan)} atualiza√ß√µes poss√≠veis")
            
            # 6. Mostrar preview
            if plan:
                print("\nüëÅÔ∏è PREVIEW DAS ATUALIZA√á√ïES (modo empty_only):")
                for p in plan:
                    print(f"  CTE {p['numero_cte']}:")
                    for field, change in p['changes'].items():
                        print(f"    {field}: '{change['old_value']}' ‚Üí '{change['new_value']}'")
                
                # Perguntar se quer executar de verdade
                print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Quer executar estas {len(plan)} atualiza√ß√µes REAIS?")
                resposta = input("Digite 'SIM' para executar ou Enter para pular: ").strip()
                
                if resposta.upper() == 'SIM':
                    print("\nüîÑ EXECUTANDO ATUALIZA√á√ïES REAIS...")
                    
                    # Criar backup
                    cte_numbers = [p['numero_cte'] for p in plan]
                    backup_path = updater.create_backup(cte_numbers)
                    if backup_path:
                        print(f"üíæ Backup criado: {backup_path}")
                    
                    # Executar
                    success = updater.execute_updates(plan, batch_size=10)
                    
                    if success:
                        print("üéâ ATUALIZA√á√ïES EXECUTADAS COM SUCESSO!")
                        print(f"üìä Estat√≠sticas:")
                        print(f"  - Processados: {updater.stats['total_processados']}")
                        print(f"  - Atualizados: {updater.stats['atualizados']}")
                        print(f"  - Erros: {updater.stats['erros']}")
                        
                        # Verificar mudan√ßas
                        print(f"\nüîç Verificando mudan√ßas no banco:")
                        for numero_cte in cte_numbers:
                            cte_atual = CTE.query.filter_by(numero_cte=numero_cte).first()
                            if cte_atual:
                                print(f"  CTE {numero_cte}:")
                                print(f"    Observa√ß√£o: {cte_atual.observacao}")
                                print(f"    Data Inclus√£o: {cte_atual.data_inclusao_fatura}")
                        
                        # Salvar relat√≥rio
                        report_path = updater.save_update_report()
                        if report_path:
                            print(f"üìä Relat√≥rio salvo: {report_path}")
                    
                    else:
                        print("‚ùå Falha na execu√ß√£o")
                
                else:
                    print("‚ÑπÔ∏è Execu√ß√£o pulada - apenas teste de funcionalidade")
            
            else:
                print("‚ÑπÔ∏è Nenhuma atualiza√ß√£o necess√°ria (campos j√° preenchidos)")
                print("üí° Isso √© normal se os CTEs j√° tiverem dados nos campos testados")
            
            return True
    
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üîç VALIDA√á√ÉO COMPLETA DO SISTEMA")
    print("="*40)
    print("Este teste vai:")
    print("1. ‚úÖ Conectar ao banco PostgreSQL")
    print("2. üìã Buscar CTEs reais")
    print("3. üìÑ Criar arquivo de teste") 
    print("4. üß™ Testar todo o pipeline")
    print("5. üëÅÔ∏è Mostrar preview de atualiza√ß√µes")
    print("6. ‚ùì Perguntar se quer executar (opcional)")
    print()
    
    input("‚ö° Pressione Enter para continuar...")
    
    if testar_bulk_update_real():
        print("\nüéâ SISTEMA 100% FUNCIONAL!")
        print("="*30)
        print("‚úÖ Todos os componentes testados")
        print("‚úÖ Sistema pronto para uso em produ√ß√£o")
        print("‚úÖ Pode processar arquivos Excel/CSV")
        print("‚úÖ Integra√ß√£o com PostgreSQL funciona")
        
        print("\nüöÄ COMO USAR:")
        print("1. python quick_run.py (interface simples)")
        print("2. Gerar template baseado em dados reais") 
        print("3. Editar template com suas atualiza√ß√µes")
        print("4. Executar atualiza√ß√£o")
        
    else:
        print("\n‚ùå SISTEMA COM PROBLEMAS")
        print("Verifique os erros acima e corrija antes de usar")

if __name__ == "__main__":
    main()