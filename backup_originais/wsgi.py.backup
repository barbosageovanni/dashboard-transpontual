#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WSGI Entry Point - Dashboard Baker Flask CORRIGIDO
Arquivo principal para deploy em produção
"""

import os
import sys
from app import create_app, db
from sqlalchemy import text

# Configurar environment para produção
os.environ.setdefault('FLASK_ENV', 'production')

# Criar aplicação
application = create_app()

# ===== ENDPOINTS DE MONITORAMENTO =====

@application.route('/health')
def health_check():
    """Endpoint de healthcheck para monitoramento"""
    try:
        # Testar conexão com banco - MÉTODO CORRIGIDO
        with application.app_context():
            db.session.execute(text('SELECT 1'))
            db.session.commit()
            
        return {
            'status': 'healthy', 
            'service': 'dashboard-baker', 
            'version': '3.0',
            'database': 'connected'
        }, 200
        
    except Exception as e:
        application.logger.error(f"Health check failed: {str(e)}")
        return {
            'status': 'unhealthy', 
            'error': str(e),
            'service': 'dashboard-baker'
        }, 500

@application.route('/ping')
def ping():
    """Endpoint simples de ping"""
    return {
        'status': 'pong', 
        'timestamp': str(db.func.now()),
        'service': 'dashboard-baker'
    }, 200

@application.route('/info')
def info():
    """Informações do sistema para debug"""
    try:
        with application.app_context():
            # Importar modelos
            from app.models.cte import CTE
            from app.models.user import User
            
            # Contar registros
            total_ctes = CTE.query.count()
            total_users = User.query.count()
            
            # Verificar admin
            admin_users = User.query.filter_by(tipo_usuario='admin', ativo=True).count()
            
        return {
            'service': 'Dashboard Baker',
            'version': '3.0',
            'status': 'operational',
            'database': 'connected',
            'environment': os.environ.get('FLASK_ENV', 'unknown'),
            'stats': {
                'total_ctes': total_ctes,
                'total_users': total_users,
                'admin_users': admin_users
            },
            'system': {
                'python_version': sys.version,
                'flask_env': os.environ.get('FLASK_ENV'),
                'database_url_set': 'DATABASE_URL' in os.environ or 'SQLALCHEMY_DATABASE_URI' in os.environ
            }
        }, 200
        
    except Exception as e:
        application.logger.error(f"Info endpoint failed: {str(e)}")
        return {
            'service': 'Dashboard Baker',
            'status': 'error',
            'error': str(e)
        }, 500

@application.route('/ready')
def readiness_check():
    """Verifica se a aplicação está pronta para receber tráfego"""
    try:
        with application.app_context():
            # Verificar se tabelas existem
            db.session.execute(text("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"))
            
            # Verificar se há pelo menos um usuário admin
            from app.models.user import User
            admin_count = User.query.filter_by(tipo_usuario='admin', ativo=True).count()
            
            if admin_count == 0:
                return {
                    'status': 'not_ready',
                    'reason': 'No admin user found'
                }, 503
            
        return {
            'status': 'ready',
            'service': 'dashboard-baker',
            'checks': {
                'database': 'ok',
                'tables': 'ok', 
                'admin_user': 'ok'
            }
        }, 200
        
    except Exception as e:
        application.logger.error(f"Readiness check failed: {str(e)}")
        return {
            'status': 'not_ready',
            'error': str(e)
        }, 503

# ===== INICIALIZAÇÃO EM PRODUÇÃO =====

@application.before_first_request
def initialize_production():
    """Inicialização específica para produção"""
    if os.environ.get('FLASK_ENV') == 'production':
        application.logger.info("🚀 Inicializando Dashboard Baker em produção")
        
        try:
            with application.app_context():
                # Criar tabelas se não existirem
                db.create_all()
                
                # Criar admin inicial se não existir
                from app.models.user import User
                admin_count = User.query.filter_by(tipo_usuario='admin', ativo=True).count()
                
                if admin_count == 0:
                    application.logger.info("👤 Criando usuário admin inicial...")
                    sucesso, resultado = User.criar_admin_inicial()
                    
                    if sucesso:
                        application.logger.info("✅ Admin inicial criado com sucesso")
                    else:
                        application.logger.error(f"❌ Erro ao criar admin: {resultado}")
                else:
                    application.logger.info(f"✅ {admin_count} admin(s) encontrado(s)")
                
                application.logger.info("✅ Dashboard Baker inicializado com sucesso")
                
        except Exception as e:
            application.logger.error(f"❌ Erro na inicialização: {str(e)}")

# ===== HANDLERS DE ERRO GLOBAIS =====

@application.errorhandler(404)
def not_found(error):
    """Handler para 404"""
    return {
        'error': 'Not Found',
        'message': 'The requested resource was not found',
        'status': 404
    }, 404

@application.errorhandler(500)
def internal_error(error):
    """Handler para 500"""
    application.logger.error(f"Internal error: {str(error)}")
    return {
        'error': 'Internal Server Error',
        'message': 'An internal server error occurred',
        'status': 500
    }, 500

# ===== CONFIGURAÇÕES DE PRODUÇÃO =====

if os.environ.get('FLASK_ENV') == 'production':
    # Configurar logging para produção
    import logging
    from logging.handlers import RotatingFileHandler
    
    # Criar diretório de logs se não existir
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    # Configurar handler de arquivo
    file_handler = RotatingFileHandler('logs/dashboard_baker.log', maxBytes=10240000, backupCount=10)
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
    ))
    file_handler.setLevel(logging.INFO)
    
    # Adicionar handler à aplicação
    application.logger.addHandler(file_handler)
    application.logger.setLevel(logging.INFO)
    application.logger.info('🚀 Dashboard Baker Flask startup em produção')

# ===== EXECUÇÃO LOCAL =====

if __name__ == "__main__":
    # Para desenvolvimento local apenas
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_ENV') != 'production'
    
    print(f"🚀 Iniciando Dashboard Baker na porta {port}")
    print(f"📝 Debug: {'Ativado' if debug else 'Desativado'}")
    print(f"🌍 Ambiente: {os.environ.get('FLASK_ENV', 'development')}")
    
    application.run(
        host='0.0.0.0', 
        port=port, 
        debug=debug
    )