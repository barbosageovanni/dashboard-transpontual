#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CORRE√á√ÉO DO SISTEMA DE AUTENTICA√á√ÉO
Execute este script para corrigir problemas de login
"""

import os
import sys
from werkzeug.security import generate_password_hash, check_password_hash

def corrigir_autenticacao():
    """Corrige problemas de autentica√ß√£o do sistema"""
    print("=" * 60)
    print("üîß CORRE√á√ÉO DO SISTEMA DE AUTENTICA√á√ÉO")
    print("=" * 60)
    
    try:
        from app import create_app, db
        from app.models.user import User
        
        app = create_app()
        
        with app.app_context():
            print("\n1Ô∏è‚É£ VERIFICANDO USU√ÅRIOS NO BANCO...")
            usuarios = User.query.all()
            
            print(f"   Total de usu√°rios: {len(usuarios)}")
            
            for user in usuarios:
                print(f"   - {user.username} ({user.email}) - Ativo: {user.ativo} - Tipo: {user.tipo_usuario}")
            
            print("\n2Ô∏è‚É£ CRIANDO/CORRIGINDO USU√ÅRIO ADMIN...")
            
            # Buscar ou criar usu√°rio admin
            admin = User.query.filter_by(username='admin').first()
            
            if not admin:
                print("   Criando usu√°rio admin...")
                admin = User(
                    username='admin',
                    email='admin@transpontual.com',
                    nome_completo='Administrador do Sistema',
                    tipo_usuario='admin',
                    ativo=True
                )
                db.session.add(admin)
            else:
                print("   Usu√°rio admin encontrado, verificando configura√ß√µes...")
                admin.tipo_usuario = 'admin'
                admin.ativo = True
            
            # Definir senhas para testar
            senhas_teste = ['senha123', 'Admin123!', 'admin123', '123456']
            
            print(f"\n3Ô∏è‚É£ CONFIGURANDO M√öLTIPLAS SENHAS PARA TESTE...")
            
            for i, senha in enumerate(senhas_teste):
                admin.set_password(senha)
                db.session.commit()
                
                print(f"   ‚úÖ Senha {i+1} configurada: {senha}")
                
                # Testar a senha
                if admin.check_password(senha):
                    print(f"   ‚úÖ Verifica√ß√£o OK para: {senha}")
                else:
                    print(f"   ‚ùå Verifica√ß√£o FALHOU para: {senha}")
            
            # Usar a primeira senha como padr√£o
            admin.set_password(senhas_teste[0])  # senha123
            db.session.commit()
            
            print(f"\n4Ô∏è‚É£ USU√ÅRIO ADMIN CONFIGURADO:")
            print(f"   Username: {admin.username}")
            print(f"   Email: {admin.email}")
            print(f"   Senha padr√£o: {senhas_teste[0]}")
            print(f"   Tipo: {admin.tipo_usuario}")
            print(f"   Ativo: {admin.ativo}")
            
            print("\n5Ô∏è‚É£ TESTANDO AUTENTICA√á√ÉO...")
            
            # Testar login program√°tico
            if admin.check_password(senhas_teste[0]):
                print("   ‚úÖ Teste de senha: OK")
            else:
                print("   ‚ùå Teste de senha: FALHA")
            
            # Verificar se √© admin
            if hasattr(admin, 'is_admin'):
                print(f"   Admin check: {admin.is_admin}")
            else:
                print("   M√©todo is_admin n√£o encontrado - verificando tipo_usuario")
                print(f"   Tipo usu√°rio: {admin.tipo_usuario}")
            
            print("\n6Ô∏è‚É£ CREDENCIAIS PARA TESTE:")
            print("   " + "="*40)
            for i, senha in enumerate(senhas_teste):
                print(f"   Op√ß√£o {i+1}: admin / {senha}")
            print("   " + "="*40)
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na corre√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def testar_login_direto():
    """Testa login diretamente no sistema"""
    print("\n7Ô∏è‚É£ TESTE DIRETO DE LOGIN...")
    
    try:
        from app import create_app
        from app.models.user import User
        
        app = create_app()
        
        with app.test_client() as client:
            # Testar diferentes combina√ß√µes
            credenciais = [
                ('admin', 'senha123'),
                ('admin', 'Admin123!'),
                ('admin', 'admin123'),
                ('admin', '123456')
            ]
            
            for username, password in credenciais:
                print(f"\n   Testando: {username} / {password}")
                
                # Fazer POST para login
                response = client.post('/auth/login', data={
                    'username': username,
                    'password': password
                }, follow_redirects=False)
                
                print(f"   Status: {response.status_code}")
                
                if response.status_code == 302:
                    print("   ‚úÖ Login bem-sucedido (redirect)")
                    location = response.headers.get('Location', '')
                    print(f"   Redirecionamento para: {location}")
                elif response.status_code == 200:
                    if 'dashboard' in response.data.decode().lower():
                        print("   ‚úÖ Login bem-sucedido (p√°gina dashboard)")
                    else:
                        print("   ‚ùå Login falhou (permaneceu na p√°gina de login)")
                else:
                    print(f"   ‚ö†Ô∏è Status inesperado: {response.status_code}")
                    
    except Exception as e:
        print(f"   ‚ùå Erro no teste direto: {e}")

def verificar_sessao_flask():
    """Verifica configura√ß√£o de sess√£o do Flask"""
    print("\n8Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ÉO DE SESS√ÉO...")
    
    try:
        from app import create_app
        
        app = create_app()
        
        print(f"   SECRET_KEY configurada: {'Sim' if app.config.get('SECRET_KEY') else 'N√£o'}")
        print(f"   SESSION_COOKIE_NAME: {app.config.get('SESSION_COOKIE_NAME', 'session')}")
        print(f"   PERMANENT_SESSION_LIFETIME: {app.config.get('PERMANENT_SESSION_LIFETIME', 'Padr√£o')}")
        
        # Verificar se Flask-Login est√° configurado
        from flask_login import login_manager
        
        if hasattr(app, 'login_manager'):
            print("   ‚úÖ Flask-Login configurado")
            print(f"   Login view: {app.login_manager.login_view}")
        else:
            print("   ‚ùå Flask-Login n√£o configurado")
            
    except Exception as e:
        print(f"   ‚ùå Erro na verifica√ß√£o: {e}")

if __name__ == "__main__":
    try:
        corrigir_autenticacao()
        testar_login_direto()
        verificar_sessao_flask()
        
        print("\n" + "=" * 60)
        print("üèÅ CORRE√á√ÉO CONCLU√çDA")
        print("=" * 60)
        print("\nPr√≥ximos passos:")
        print("1. Reiniciar o servidor: python run.py")
        print("2. Acessar: http://localhost:5000/auth/login")
        print("3. Testar credenciais listadas acima")
        print("4. Se ainda n√£o funcionar, executar: python fix_user_model.py")
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO: {e}")
        import traceback
        traceback.print_exc()