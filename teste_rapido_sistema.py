#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste R√°pido do Sistema CTEs - VERS√ÉO SIMPLIFICADA
teste_rapido_sistema.py - PARA TESTAR SEM CONTEXTO FLASK COMPLEXO
"""

import os
import sys
import requests
import json
from datetime import datetime

def testar_via_api():
    """Testa o sistema via requisi√ß√µes HTTP para as APIs"""
    print("üß™ TESTE R√ÅPIDO VIA API")
    print("=" * 50)
    
    # Configurar base URL
    base_url = "http://localhost:5000"
    
    # Se estiver rodando em outra porta, ajuste aqui
    if len(sys.argv) > 1:
        try:
            porta = int(sys.argv[1])
            base_url = f"http://localhost:{porta}"
        except:
            pass
    
    print(f"üåê Testando servidor em: {base_url}")
    
    testes = {
        'servidor_respondendo': False,
        'api_test_conexao': False,
        'api_listar_simples': False,
        'api_listar_completa': False,
        'diagnostico_disponivel': False
    }
    
    detalhes = {}
    
    # ==================== TESTE 1: SERVIDOR RESPONDENDO ====================
    print("\n1Ô∏è‚É£ Testando se o servidor est√° rodando...")
    try:
        response = requests.get(f"{base_url}/", timeout=5)
        if response.status_code < 500:
            testes['servidor_respondendo'] = True
            print("‚úÖ Servidor est√° respondendo")
        else:
            print(f"‚ö†Ô∏è Servidor respondendo com erro {response.status_code}")
    except Exception as e:
        print(f"‚ùå Servidor n√£o responde: {e}")
        print("üí° Verifique se o Flask est√° rodando e na porta correta")
        return testes, detalhes
    
    # ==================== TESTE 2: API DE TESTE DE CONEX√ÉO ====================
    print("\n2Ô∏è‚É£ Testando API de conex√£o...")
    try:
        response = requests.get(f"{base_url}/ctes/api/test-conexao", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('success') and data.get('conexao') == 'OK':
                testes['api_test_conexao'] = True
                detalhes['total_ctes'] = data.get('total_ctes', 0)
                print(f"‚úÖ API de conex√£o OK - {detalhes['total_ctes']} CTEs no banco")
            else:
                print(f"‚ö†Ô∏è API de conex√£o com problemas: {data}")
        elif response.status_code == 401:
            print("‚ö†Ô∏è API requer autentica√ß√£o - teste ser√° limitado")
            testes['api_test_conexao'] = 'REQUER_LOGIN'
        else:
            print(f"‚ùå API de conex√£o falhou: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   Detalhes: {error_data}")
            except:
                print(f"   Resposta: {response.text[:200]}")
    except Exception as e:
        print(f"‚ùå Erro ao testar API de conex√£o: {e}")
    
    # ==================== TESTE 3: API DE LISTAGEM SIMPLES ====================
    print("\n3Ô∏è‚É£ Testando API de listagem simples...")
    try:
        response = requests.get(f"{base_url}/ctes/api/listar-simples?per_page=5", timeout=15)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                testes['api_listar_simples'] = True
                detalhes['ctes_retornados'] = len(data.get('data', []))
                print(f"‚úÖ API listagem simples OK - {detalhes['ctes_retornados']} CTEs retornados")
                
                # Mostrar exemplo de dados se houver
                if data.get('data'):
                    exemplo = data['data'][0]
                    print(f"   Exemplo: CTE {exemplo.get('numero_cte')} - {exemplo.get('destinatario_nome', 'N/A')}")
            else:
                print(f"‚ö†Ô∏è API listagem simples retornou erro: {data.get('error', 'Erro desconhecido')}")
        elif response.status_code == 401:
            print("‚ö†Ô∏è API de listagem requer autentica√ß√£o")
        else:
            print(f"‚ùå API listagem simples falhou: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   Erro: {error_data.get('error', 'Erro desconhecido')}")
            except:
                pass
    except Exception as e:
        print(f"‚ùå Erro ao testar API de listagem simples: {e}")
    
    # ==================== TESTE 4: API DE LISTAGEM COMPLETA ====================
    print("\n4Ô∏è‚É£ Testando API de listagem completa...")
    try:
        response = requests.get(f"{base_url}/ctes/api/listar?per_page=10", timeout=15)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                testes['api_listar_completa'] = True
                total_encontrado = data.get('pagination', {}).get('total', 0)
                detalhes['total_paginado'] = total_encontrado
                print(f"‚úÖ API listagem completa OK - {total_encontrado} CTEs total")
            else:
                print(f"‚ö†Ô∏è API listagem completa com problemas: {data.get('error', 'Erro desconhecido')}")
        elif response.status_code == 401:
            print("‚ö†Ô∏è API de listagem completa requer autentica√ß√£o")
        else:
            print(f"‚ùå API listagem completa falhou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar API de listagem completa: {e}")
    
    # ==================== TESTE 5: API DE DIAGN√ìSTICO ====================
    print("\n5Ô∏è‚É£ Testando API de diagn√≥stico...")
    try:
        response = requests.get(f"{base_url}/ctes/api/diagnostico-simples", timeout=20)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                testes['diagnostico_disponivel'] = True
                diagnostico = data.get('diagnostico_simples', {})
                resumo = diagnostico.get('resumo_rapido', {})
                print(f"‚úÖ API de diagn√≥stico OK - Status: {resumo.get('status', 'Desconhecido')}")
                
                # Mostrar testes b√°sicos
                testes_basicos = diagnostico.get('testes_basicos', {})
                for nome, resultado in testes_basicos.items():
                    print(f"   {nome}: {resultado}")
                    
            else:
                print(f"‚ö†Ô∏è API de diagn√≥stico com problemas: {data.get('error', 'Erro desconhecido')}")
        elif response.status_code == 401:
            print("‚ö†Ô∏è API de diagn√≥stico requer autentica√ß√£o")
        elif response.status_code == 404:
            print("‚ö†Ô∏è API de diagn√≥stico n√£o encontrada - adicione √†s rotas")
        else:
            print(f"‚ùå API de diagn√≥stico falhou: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar API de diagn√≥stico: {e}")
    
    return testes, detalhes

def testar_arquivos_locais():
    """Testa se os arquivos importantes existem no sistema"""
    print("\nüìÅ VERIFICANDO ARQUIVOS DO SISTEMA")
    print("=" * 40)
    
    arquivos_importantes = {
        'app/__init__.py': 'Arquivo principal da aplica√ß√£o',
        'app/models/cte.py': 'Modelo CTE',
        'app/routes/ctes.py': 'Rotas dos CTEs', 
        'app/utils/date_utils.py': 'Utilit√°rio de datas (corre√ß√£o)',
        'requirements.txt': 'Depend√™ncias',
        'run.py': 'Script de inicializa√ß√£o',
        'app.py': 'Script de inicializa√ß√£o alternativo'
    }
    
    arquivos_encontrados = {}
    
    for arquivo, descricao in arquivos_importantes.items():
        if os.path.exists(arquivo):
            try:
                tamanho = os.path.getsize(arquivo)
                arquivos_encontrados[arquivo] = {
                    'existe': True,
                    'tamanho': tamanho,
                    'descricao': descricao
                }
                print(f"‚úÖ {arquivo} - {tamanho} bytes")
            except Exception as e:
                arquivos_encontrados[arquivo] = {
                    'existe': True,
                    'erro': str(e),
                    'descricao': descricao
                }
                print(f"‚ö†Ô∏è {arquivo} - erro ao ler: {e}")
        else:
            arquivos_encontrados[arquivo] = {
                'existe': False,
                'descricao': descricao
            }
            print(f"‚ùå {arquivo} - n√£o encontrado")
    
    return arquivos_encontrados

def gerar_relatorio(testes, detalhes, arquivos):
    """Gera relat√≥rio final do teste"""
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL")
    print("=" * 60)
    
    # Contar sucessos
    sucessos = sum(1 for v in testes.values() if v is True)
    total_testes = len(testes)
    
    print(f"\nüéØ RESULTADO GERAL: {sucessos}/{total_testes} testes passaram")
    
    # Status geral
    if sucessos == total_testes:
        status = "‚úÖ SISTEMA FUNCIONANDO PERFEITAMENTE"
        cor = "VERDE"
    elif sucessos >= total_testes * 0.8:
        status = "üü° SISTEMA FUNCIONANDO COM PEQUENOS PROBLEMAS"
        cor = "AMARELO" 
    elif sucessos >= total_testes * 0.5:
        status = "üü† SISTEMA COM PROBLEMAS SIGNIFICATIVOS"
        cor = "LARANJA"
    else:
        status = "üî¥ SISTEMA COM PROBLEMAS CR√çTICOS"
        cor = "VERMELHO"
    
    print(f"\n{status}")
    
    # Detalhes dos testes
    print(f"\nüìã DETALHES DOS TESTES:")
    for teste, resultado in testes.items():
        if resultado is True:
            print(f"   ‚úÖ {teste.replace('_', ' ').title()}")
        elif resultado is False:
            print(f"   ‚ùå {teste.replace('_', ' ').title()}")
        else:
            print(f"   ‚ö†Ô∏è {teste.replace('_', ' ').title()}: {resultado}")
    
    # Informa√ß√µes √∫teis
    if detalhes:
        print(f"\nüìä INFORMA√á√ïES:")
        for key, value in detalhes.items():
            print(f"   ‚Ä¢ {key.replace('_', ' ').title()}: {value}")
    
    # Arquivos cr√≠ticos faltando
    arquivos_faltando = [nome for nome, info in arquivos.items() if not info['existe']]
    if arquivos_faltando:
        print(f"\n‚ùó ARQUIVOS CR√çTICOS FALTANDO:")
        for arquivo in arquivos_faltando[:3]:  # Mostrar apenas os 3 primeiros
            print(f"   ‚Ä¢ {arquivo}")
    
    # Pr√≥ximas a√ß√µes recomendadas
    print(f"\nüîß PR√ìXIMAS A√á√ïES RECOMENDADAS:")
    
    if cor == "VERDE":
        print("   ‚Ä¢ Sistema funcionando bem!")
        print("   ‚Ä¢ Execute diagn√≥stico completo via API se precisar de mais detalhes")
        print("   ‚Ä¢ Continue o desenvolvimento normal")
    elif cor == "AMARELO":
        print("   ‚Ä¢ Verifique os testes que falharam")
        print("   ‚Ä¢ Considere implementar as corre√ß√µes sugeridas")
        print("   ‚Ä¢ Sistema est√° utiliz√°vel mas pode melhorar")
    elif cor == "LARANJA":
        print("   ‚Ä¢ Implemente os artefatos de corre√ß√£o fornecidos")
        print("   ‚Ä¢ Verifique logs do servidor Flask")
        print("   ‚Ä¢ Teste cada API individualmente")
    else:  # VERMELHO
        print("   ‚Ä¢ üö® A√á√ÉO IMEDIATA NECESS√ÅRIA")
        print("   ‚Ä¢ Verificar se o servidor Flask est√° rodando")
        print("   ‚Ä¢ Implementar TODOS os artefatos de corre√ß√£o")
        print("   ‚Ä¢ Verificar configura√ß√£o do banco de dados")
        print("   ‚Ä¢ Reiniciar a aplica√ß√£o")
    
    # Comandos √∫teis
    print(f"\nüí° COMANDOS √öTEIS:")
    print("   ‚Ä¢ Para testar APIs: curl http://localhost:5000/ctes/api/test-conexao")
    print("   ‚Ä¢ Para ver logs: tail -f nohup.out (se usando nohup)")
    print("   ‚Ä¢ Para diagn√≥stico via browser: http://localhost:5000/ctes/api/diagnostico-simples")
    
    # Salvar relat√≥rio em arquivo
    relatorio_completo = {
        'timestamp': datetime.now().isoformat(),
        'status_geral': status,
        'cor': cor,
        'sucessos': sucessos,
        'total_testes': total_testes,
        'testes': testes,
        'detalhes': detalhes,
        'arquivos': arquivos
    }
    
    nome_arquivo = f"teste_rapido_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(nome_arquivo, 'w', encoding='utf-8') as f:
        json.dump(relatorio_completo, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ Relat√≥rio salvo em: {nome_arquivo}")
    
    return status, cor

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE R√ÅPIDO DO SISTEMA CTEs")
    print("Vers√£o simplificada - sem contexto Flask complexo")
    print("=" * 60)
    
    # Executar testes
    testes, detalhes = testar_via_api()
    arquivos = testar_arquivos_locais()
    
    # Gerar relat√≥rio final
    status, cor = gerar_relatorio(testes, detalhes, arquivos)
    
    print(f"\nüèÅ TESTE CONCLU√çDO - STATUS: {cor}")
    
    # Retornar c√≥digo de sa√≠da apropriado
    if cor == "VERDE":
        return 0  # Sucesso
    elif cor in ["AMARELO", "LARANJA"]:
        return 1  # Problemas menores
    else:
        return 2  # Problemas cr√≠ticos

if __name__ == "__main__":
    import sys
    
    print("üìã Uso: python teste_rapido_sistema.py [porta]")
    print("Exemplo: python teste_rapido_sistema.py 5000")
    print()
    
    try:
        codigo_saida = main()
        sys.exit(codigo_saida)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Teste interrompido pelo usu√°rio")
        sys.exit(3)
    except Exception as e:
        print(f"\nüí• ERRO CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(4)